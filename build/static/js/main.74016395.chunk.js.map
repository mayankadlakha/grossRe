{"version":3,"sources":["localStorage.js","Selectors.js","components/RoundButton.js","components/Dropdown.js","components/GroceryType.js","components/Table.js","components/List.js","components/Input.js","components/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["setGroceryList","newGroceryList","localStorage","setItem","JSON","stringify","getGroceryList","parse","getItem","addNewItem","newItem","currentGroceryList","updateItem","itemIdToUpdate","updateToApply","map","item","id","parseInt","deleteItem","itemIdToDelete","filter","deleteList","clear","getNextItemId","state","data","length","isItemInList","itemId","getItemById","find","getNewItem","name","quantity","type","RoundButton","value","onClick","style","DropDown","options","selectedOption","onSelectDropdown","isItemSelected","onChange","e","console","log","randomFunc","selected","GroceryType","Vegetables","HealthySnacks","Meat","Breakfast","Medicine","Cleaning","Frozen","Junk","Misc","Table","onAdd","onSubtract","onDeleteListItem","tableBody","onSelectType","padding","key","Object","values","List","alignItems","justifyContent","Input","placeholder","width","AddItem","onItemNameChange","onItemQuantityChange","onAddItem","useState","buttonDisabled","setButtonDisabled","isItemNameEntered","setIsItemNameEntered","useEffect","event","target","disabled","App","idToDelete","objectToUpdate","getDataFromDb","groceryList","setState","putDataToDB","deleteOneFromDB","idTodelete","deleteAllFromDB","updateDB","idToUpdate","addToItem","itemInState","subtractFromItem","this","textAlign","display","flexDirection","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74016395.chunk.js","sourcesContent":["const setGroceryList = newGroceryList => localStorage.setItem('groceryList', JSON.stringify(newGroceryList ));\n\nexport const getGroceryList = () => JSON.parse(localStorage.getItem('groceryList')) || [];\n\nexport const addNewItem = (newItem) => {\n  const currentGroceryList = getGroceryList();\n  const newGroceryList = [...currentGroceryList || [], newItem];\n  setGroceryList(newGroceryList);\n}\n\nexport const updateItem = (itemIdToUpdate, updateToApply) => {\n  const currentGroceryList = getGroceryList();\n  const newGroceryList = currentGroceryList.map(\n    item => item.id === parseInt(itemIdToUpdate) ? {...item, ...updateToApply} : item\n    );\n  setGroceryList(newGroceryList);\n}\n\nexport const deleteItem = (itemIdToDelete) => {\n  const currentGroceryList = getGroceryList();\n  const newGroceryList = currentGroceryList.filter(item => item.id !== itemIdToDelete);\n  setGroceryList(newGroceryList);\n}\n\nexport const deleteList = () => localStorage.clear();","export const getNextItemId = (state) => state.data.length;\n\nexport const isItemInList = (state, itemId) => state.data.filter(({id}) => id === itemId ) !== null;\n\nexport const getItemById = (state, itemId) => state.data.find(({id})=> id === itemId);\n\nexport const getNewItem = (state) => ({\n  id: getNextItemId(state),\n  name: state.name,\n  quantity: parseInt(state.quantity),\n  type: state.type,\n});","import React from 'react';\n\nconst RoundButton = ({\n  value,\n  onClick,\n}\n) => (\n<button style={{'border-radius': \"50%\",}} onClick={onClick}>\n  {value}\n</button> \n\n);\n\nexport default RoundButton;\n\n","import React from 'react';\n\nconst DropDown = ({\n  name,\n  itemId,\n  options,\n  selectedOption,\n  onSelectDropdown,\n}) => {\n  const isItemSelected = (item) => item === selectedOption ? \"selected\" : \"\";\n  const randomFunc = ({ e, itemId }) => console.log(\"Yo I am random\", itemId) || onSelectDropdown({ e, itemId });\n\n  return (\n    <select name={name} id={itemId} onChange={(e) => randomFunc({ e, itemId })}>\n      { options.map(item => <option selected={isItemSelected(item)} value={item}>{item}</option>)}\n    </select >\n\n  );\n}\n\nexport default DropDown","const GroceryType = {\n  Vegetables: \"Vegetables\",\n  HealthySnacks: \"Healthy Snacks\",\n  Meat: \"Meat\",\n  Breakfast: \"Breakfast\",\n  Medicine: \"Medicine\",\n  Cleaning: \"Cleaning\",\n  Frozen: \"Frozen\",\n  Junk: \"Junk\",\n  Misc: \"Misc\"\n}\n\nexport default GroceryType;","import React from 'react';\nimport DropDown from './Dropdown';\nimport GroceryType from './GroceryType';\nimport RoundButton from './RoundButton';\n\nconst Table = ({ data,\n  onAdd,\n  onSubtract,\n  onDeleteListItem,\n  onSelectType, }) => {\n\n  const tableBody = data.map(item => (\n    <tr style={{ padding: \"10px\" }} key={data.name}>\n      <th>\n        <RoundButton value='+' onClick={() => (onAdd(item.id))} /> &nbsp;\n        {item.quantity} &nbsp;\n        <RoundButton value='-' onClick={() => (onSubtract(item.id))} />  &nbsp;\n      </th>\n      <th>\n        {item.name} &nbsp;\n      </th>\n      <th>\n        <DropDown\n          name='type'\n          itemId={item.id}\n          options={Object.values(GroceryType)}\n          selectedOption={item.type}\n          onSelectDropdown={console.log(\"onSelectDropdown\")}\n        />\n      </th>\n      <th>\n        <RoundButton value='X' onClick={() => (onDeleteListItem(item.id))} />\n        <button onClick={() => onDeleteListItem(item.id)}>\n          Delete\n        </button>\n      </th>\n    </tr>\n  ));\n\n  return (\n    <table>\n      <tr>\n        <th>Quantity</th>\n        <th>Item</th>\n        <th>Category</th>\n        <th>Actions</th>\n      </tr>\n      {tableBody}\n    </table>);\n};\n\nexport default Table;","import React from 'react';\nimport RoundButton from './RoundButton';\nimport DropDown from './Dropdown';\nimport GroceryType from './GroceryType';\nimport Table from './Table';\n\nconst List = ({\n  data,\n  onAdd,\n  onSubtract,\n  onDeleteListItem,\n  onSelectType,\n}\n) => (\n  <div style={{ padding: \"10px\", alignItems: \"center\", justifyContent: \"center\" }}>\n    {data.length <= 0\n      ? \"NO DB ENTRIES YET\"\n      :\n      <Table data={data} onAdd={onAdd} onSubtract={onSubtract} onDeleteListItem={onDeleteListItem} />\n    }\n  </div>\n);\n\nexport default List;\n\n","import React from 'react';\n\nconst Input = ({\n  onChange,\n  placeholder\n}\n) => (\n<input\n  type=\"text\"\n  onChange={onChange}\n  placeholder={placeholder}\n  style={{ width: \"200px\" }}\n/>\n);\n\nexport default Input;\n\n","import React, {useEffect, useState} from 'react';\nimport Input from './Input';\nimport DropDown from './Dropdown';\nimport GroceryType from './GroceryType';\n\nconst AddItem = ({\n  onItemNameChange, \n  onItemQuantityChange,\n  onSelectType,\n  onAddItem,\n})=> {\n\nconst [buttonDisabled, setButtonDisabled] = useState(true);\nconst [isItemNameEntered, setIsItemNameEntered] = useState(false);\nconst [isItemQuantityEntered, setIsItemQuantityEntered] = useState(false);\n  \nuseEffect(() =>{\n  setButtonDisabled(isItemNameEntered ? false : true);\n});\n\nreturn (\n  <div style={{ padding: \"10px\" }}>\n    <Input\n      onChange={(event) => {\n        onItemNameChange(event); \n        setIsItemNameEntered(event.target.value ? true : false);\n        }}\n      placeholder=\"Item\"\n    />\n    <Input\n      onChange={onItemQuantityChange}\n      placeholder=\"Quantity\"\n    />\n    <DropDown\n      name='type'\n      options={Object.values(GroceryType)}\n      selectedOption={GroceryType.Frozen}\n      onSelectDropdown={onSelectType}\n    />\n    <button onClick={onAddItem} disabled={buttonDisabled}>\n      ADD\n    </button>\n  </div>\n);\n}\n\nexport default AddItem;","// /client/App.js\nimport React, { Component } from \"react\";\nimport { addNewItem, getGroceryList, updateItem, deleteItem, deleteList } from \"./localStorage\";\nimport { isItemInList, getItemById, getNewItem } from \"./Selectors\";\nimport List from \"./components/List\";\nimport AddItem from \"./components/AddItem\";\n\nclass App extends Component {\n  // initialize our state \n  state = {\n    data: [],\n    id: 0,\n    name: 'null',\n    quantity: 0,\n    idToDelete: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has \n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n  }\n\n  getDataFromDb = () => {\n    const groceryList = getGroceryList();\n    this.setState({ data: groceryList });\n  };\n\n  putDataToDB = () => {\n    console.log(getNewItem(this.state))\n    addNewItem({\n      ...getNewItem(this.state)\n    });\n    this.getDataFromDb();\n  };\n\n\n  deleteOneFromDB = idTodelete => {\n    deleteItem(idTodelete);\n    this.getDataFromDb();\n  };\n\n  deleteAllFromDB = () => {\n    deleteList();\n    this.getDataFromDb();\n  }\n\n  updateDB = (idToUpdate, updateToApply) => {\n    if (isItemInList(this.state, idToUpdate)) {\n      updateItem(idToUpdate, updateToApply);\n      this.getDataFromDb();\n    };\n  };\n\n  addToItem = (itemId) => {\n    const itemInState = getItemById(this.state, itemId);\n    const newItem = {\n      ...itemInState,\n      quantity: parseInt(itemInState.quantity) + 1,\n    }\n\n    this.updateDB(itemId, newItem);\n  }\n\n  subtractFromItem = (itemId) => {\n    const itemInState = getItemById(this.state, itemId);\n    const newItem = {\n      ...itemInState,\n      quantity: parseInt(itemInState.quantity) - 1,\n    }\n\n    this.updateDB(itemId, newItem);\n  }\n\n  onSelectType = ({ e, itemId }) => {\n    console.log(\"onSelectType\")\n    // console.log(e.target.value, itemId)\n    // const updateToApply = {\n    //   type: e.target.value,\n    // };\n    // this.updateDB(itemId, updateToApply);\n  };\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div style={{ textAlign: \"center\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n        <button onClick={() => this.deleteAllFromDB()}>\n          Clear All\n        </button>\n        <List\n          data={data}\n          onAdd={this.addToItem}\n          onSubtract={this.subtractFromItem}\n          onDeleteListItem={this.deleteOneFromDB}\n          onSelectType={this.onSelectType}\n        />\n        <AddItem\n          onItemNameChange={e => this.setState({ name: e.target.value })}\n          onItemQuantityChange={e => this.setState({ quantity: e.target.value })}\n          onSelectType={({ e }) => this.setState({ type: e.target.value })}\n          onAddItem={() => this.putDataToDB()}\n        />\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, { name: this.state.updateToApply })\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}